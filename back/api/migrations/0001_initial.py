# Generated by Django 2.2.8 on 2020-09-03 14:10

import api.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(help_text='EMAIL ID.', max_length=64, unique=True, verbose_name='email id')),
                ('username', models.CharField(max_length=30)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', api.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CardRelic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eng_name', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=50)),
                ('subject', models.CharField(max_length=50)),
                ('img', models.ImageField(upload_to='')),
                ('effect', models.TextField()),
                ('keyword', models.TextField()),
                ('rarity', models.CharField(blank=True, max_length=40)),
                ('score', models.PositiveSmallIntegerField(default=0)),
                ('opinion_count', models.PositiveSmallIntegerField(default=0)),
                ('card', models.BooleanField(default=False)),
                ('kind', models.CharField(blank=True, max_length=20)),
                ('cost', models.CharField(blank=True, max_length=10)),
                ('relic', models.BooleanField(default=False)),
                ('flavor_text', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.TextField()),
                ('view', models.PositiveIntegerField(default=0, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='Opinion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=50)),
                ('writer', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField()),
                ('score', models.PositiveSmallIntegerField()),
                ('pro', models.PositiveSmallIntegerField(default=0)),
                ('con', models.PositiveSmallIntegerField(default=0)),
                ('archetype', models.BooleanField(default=False)),
                ('key_card', models.TextField()),
                ('key_relic', models.TextField()),
                ('recommend_card', models.TextField()),
                ('recommend_relic', models.TextField()),
                ('card_character', models.CharField(max_length=50)),
                ('relic', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Potion',
            fields=[
                ('eng_name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('img', models.ImageField(upload_to='')),
                ('effect', models.TextField()),
                ('keyword', models.TextField()),
                ('rarity', models.TextField(max_length=20)),
            ],
        ),
        migrations.AddConstraint(
            model_name='cardrelic',
            constraint=models.UniqueConstraint(fields=('eng_name', 'subject', 'card'), name='unique_card'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
